---
description: 
globs: 
alwaysApply: false
---
# 프로젝트 개발 지침

## 코드 품질
- 모든 코드는 가독성을 최우선으로 작성할 것
- 중복 코드는 최소화하고 재사용 가능한 함수나 클래스로 분리할 것
- 모든 함수와 메서드는 단일 책임 원칙을 따를 것
- 변수와 함수 이름은 명확하고 의미있게 작성할 것
- 하드코딩된 값은 상수로 분리할 것

## 코드 스타일
- 프로젝트의 코딩 컨벤션을 일관되게 유지할 것
- 들여쓰기는 공백 4칸으로 통일할 것
- 한 줄의 길이는 80자를 넘지 않도록 할 것
- 클래스, 함수, 변수 명명 규칙을 준수할 것
- 주석은 코드가 '왜' 그렇게 작성되었는지 설명할 것

## 문서화
- 모든 공개 API에는 문서 주석을 작성할 것
- README 파일에 프로젝트 설정 및 실행 방법을 상세히 기술할 것
- 복잡한 알고리즘이나 비즈니스 로직은 별도 문서로 작성할 것
- 변경 사항은 CHANGELOG에 기록할 것

## 테스트
- 모든 새로운 기능에는 단위 테스트를 작성할 것
- 테스트 커버리지는 최소 80% 이상 유지할 것
- 테스트는 독립적이고 반복 가능하게 작성할 것
- 중요한 사용자 흐름에 대한 통합 테스트를 구현할 것

## 보안
- 사용자 입력은 항상 검증하고 이스케이프 처리할 것
- 민감한 정보는 환경 변수나 보안 저장소에 보관할 것
- 외부 라이브러리는 보안 취약점을 정기적으로 점검할 것
- SQL 인젝션, XSS 등 일반적인 보안 취약점을 방지할 것

## 성능
- 데이터베이스 쿼리는 최적화할 것
- 불필요한 API 호출은 최소화할 것
- 대용량 데이터 처리 시 페이지네이션 적용할 것
- 리소스 집약적인 작업은 비동기 처리할 것

## 버전 관리
- 커밋 메시지는 명확하고 설명적으로 작성할 것
- 기능 개발은 별도 브랜치에서 진행할 것
- PR 전 코드 리뷰를 필수로 진행할 것
- 메인 브랜치는 항상 배포 가능한 상태로 유지할 것



## 프로젝트 구조
- 계층형 아키텍처를 기반으로 패키지 구조화할 것
- 각 패키지는 단일 책임을 가질 것
- 순환 의존성은 엄격히 금지할 것
- 도메인 중심 설계 원칙을 따를 것

### 기본 패키지 구조
src/
├── main/
│ ├── java/com/example/project/
│ │ ├── config/ # 애플리케이션 설정
│ │ ├── controller/ # 웹 요청 처리
│ │ ├── dto/ # 데이터 전송 객체
│ │ ├── exception/ # 예외 처리
│ │ ├── model/ # 도메인 모델
│ │ ├── repository/ # 데이터 접근 계층
│ │ ├── service/ # 비즈니스 로직
│ │ └── util/ # 유틸리티 클래스
│ └── resources/ # 설정 파일, 정적 리소스
└── test/ # 테스트 코드



### React 프로젝트 구조 (UCEO)
src/
├── assets/ # 이미지, 폰트 등 정적 리소스
├── components/ # 재사용 가능한 컴포넌트
│ ├── common/ # 공통 컴포넌트
│ ├── layout/ # 레이아웃 관련 컴포넌트
│ └── features/ # 특정 기능과 관련된 컴포넌트
├── hooks/ # 커스텀 훅
├── pages/ # 페이지 컴포넌트
├── services/ # API 통신 로직
├── store/ # 상태 관리 (Redux/Recoil 등)
├── styles/ # 전역 스타일, 테마 설정
├── types/ # TypeScript 타입 정의
├── utils/ # 유틸리티 함수
└── constants/ # 상수 정의

public/
├── index.html
└── static/ # 정적 파일

### 주요 디렉토리 설명
- components/: 재사용 가능한 UI 컴포넌트
  - common/: 버튼, 입력 필드 등 공통 컴포넌트
  - layout/: 헤더, 푸터, 사이드바 등 레이아웃 컴포넌트
  - features/: 특정 기능에 종속된 컴포넌트
- hooks/: 커스텀 훅 모음
- pages/: 라우트에 매핑되는 페이지 컴포넌트
- services/: API 통신 및 외부 서비스 연동 로직
- store/: 전역 상태 관리 관련 코드
- styles/: 글로벌 스타일, 테마, 스타일 유틸리티
- types/: TypeScript 인터페이스, 타입 정의
- utils/: 유틸리티 함수 및 헬퍼 함수
- constants/: 상수 및 설정값 정의

### 네이밍 컨벤션
- 컴포넌트 파일: PascalCase.tsx (예: Button.tsx)
- 훅 파일: camelCase.ts (예: useAuth.ts)
- 유틸리티 파일: camelCase.ts (예: formatDate.ts)
- 스타일 파일: camelCase.module.css (예: button.module.css)
- 테스트 파일: *.test.tsx 또는 *.spec.tsx

### 컴포넌트 구조
components/
└── ComponentName/
    ├── index.tsx # 메인 컴포넌트
    ├── ComponentName.module.css # 스타일
    ├── ComponentName.test.tsx # 테스트

    └── types.ts # 타입 정의