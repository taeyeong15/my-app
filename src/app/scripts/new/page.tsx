'use client';

import Layout from '@/components/Layout';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

interface ScriptForm {
  name: string;
  type: 'email' | 'sms' | 'call' | 'chatbot' | 'push';
  category: 'sales' | 'support' | 'marketing' | 'onboarding' | 'retention';
  content: string;
  subject?: string;
  variables: string[];
  conditions: {
    timing: string;
    frequency: string;
    targetAudience: string;
    triggers: string[];
  };
  settings: {
    autoSend: boolean;
    personalization: boolean;
    tracking: boolean;
    a_b_testing: boolean;
  };
}

export default function NewScriptPage() {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState<ScriptForm>({
    name: '',
    type: 'email',
    category: 'marketing',
    content: '',
    subject: '',
    variables: [],
    conditions: {
      timing: 'immediate',
      frequency: 'once',
      targetAudience: 'all',
      triggers: []
    },
    settings: {
      autoSend: false,
      personalization: true,
      tracking: true,
      a_b_testing: false
    }
  });

  const [currentStep, setCurrentStep] = useState(2); // 2Îã®Í≥ÑÎ°ú ÏãúÏûë
  const totalSteps = 4;
  const [newVariable, setNewVariable] = useState('');
  const [previewMode, setPreviewMode] = useState(false);
  const [isTestSendModalOpen, setIsTestSendModalOpen] = useState(false);
  const [testPhoneNumber, setTestPhoneNumber] = useState('');
  const [isTestSending, setIsTestSending] = useState(false);

  useEffect(() => {
    const checkAuth = () => {
      try {
        const loggedInUser = sessionStorage.getItem('currentUser');
        
        if (!loggedInUser) {
          router.push('/login');
          return;
        }
      } catch (error) {
        console.error('Ïù∏Ï¶ù ÌôïÏù∏ Ïã§Ìå®:', error);
        router.push('/login');
      }
    };
    
    checkAuth();
  }, [router]);

  const handleInputChange = (field: string, value: any) => {
    if (field.includes('.')) {
      const [parent, child] = field.split('.');
      setFormData(prev => ({
        ...prev,
        [parent]: {
          ...(prev[parent as keyof typeof prev] as any),
          [child]: value
        }
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
    }
  };

  const handleArrayChange = (field: string, value: string, action: 'add' | 'remove') => {
    const keys = field.split('.');
    setFormData(prev => {
      const newData = { ...prev };
      let target: any = newData;
      
      for (let i = 0; i < keys.length - 1; i++) {
        target = target[keys[i]];
      }
      
      const finalKey = keys[keys.length - 1];
      const currentArray = target[finalKey] as string[];
      
      if (action === 'add' && value && !currentArray.includes(value)) {
        target[finalKey] = [...currentArray, value];
      } else if (action === 'remove') {
        target[finalKey] = currentArray.filter(item => item !== value);
      }
      
      return newData;
    });
  };

  const addVariable = () => {
    if (newVariable && !formData.variables.includes(newVariable)) {
      setFormData(prev => ({
        ...prev,
        variables: [...prev.variables, newVariable]
      }));
      setNewVariable('');
    }
  };

  const removeVariable = (variable: string) => {
    setFormData(prev => ({
      ...prev,
      variables: prev.variables.filter(v => v !== variable)
    }));
  };

  const insertVariable = (variable: string) => {
    const textarea = document.querySelector('textarea[name="content"]') as HTMLTextAreaElement;
    if (textarea) {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const text = textarea.value;
      const before = text.substring(0, start);
      const after = text.substring(end);
      const newText = before + `{{${variable}}}` + after;
      
      setFormData(prev => ({
        ...prev,
        content: newText
      }));
      
      // Ïª§ÏÑú ÏúÑÏπò Ï°∞Ï†ï
      setTimeout(() => {
        textarea.focus();
        textarea.setSelectionRange(start + variable.length + 4, start + variable.length + 4);
      }, 0);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      // API Ìò∏Ï∂ú Î°úÏßÅ
      console.log('Submitting script:', formData);
      
      // ÏûÑÏãúÎ°ú ÎîúÎ†àÏù¥ Ï∂îÍ∞Ä
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      alert('Ïä§ÌÅ¨Î¶ΩÌä∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!');
      router.push('/scripts');
    } catch (error) {
      console.error('Error creating script:', error);
      alert('Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const nextStep = () => setCurrentStep(prev => Math.min(prev + 1, totalSteps));
  const prevStep = () => setCurrentStep(prev => Math.max(prev - 1, 1));

  const handleTestSend = async () => {
    if (!testPhoneNumber.trim()) {
      alert('Ìï∏ÎìúÌè∞ Î≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    // Ìï∏ÎìúÌè∞ Î≤àÌò∏ ÌòïÏãù Í≤ÄÏ¶ù
    const phoneRegex = /^01[0-9]-?[0-9]{4}-?[0-9]{4}$/;
    if (!phoneRegex.test(testPhoneNumber.replace(/-/g, ''))) {
      alert('Ïò¨Î∞îÎ•∏ Ìï∏ÎìúÌè∞ Î≤àÌò∏ ÌòïÏãùÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setIsTestSending(true);
    try {
      // TODO: Ïã§Ï†ú ÌÖåÏä§Ìä∏ Î∞úÏÜ° API Ìò∏Ï∂ú
      await new Promise(resolve => setTimeout(resolve, 2000)); // ÏûÑÏãú ÎîúÎ†àÏù¥
      
      alert('ÌÖåÏä§Ìä∏ Î©îÏãúÏßÄÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î∞úÏÜ°ÎêòÏóàÏäµÎãàÎã§.');
      setIsTestSendModalOpen(false);
      setTestPhoneNumber('');
    } catch (error) {
      console.error('ÌÖåÏä§Ìä∏ Î∞úÏÜ° Ïã§Ìå®:', error);
      alert('ÌÖåÏä§Ìä∏ Î∞úÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setIsTestSending(false);
    }
  };

  const scriptTypes = [
    { value: 'email', label: 'Ïù¥Î©îÏùº', description: 'Ïù¥Î©îÏùº ÎßàÏºÄÌåÖ Î©îÏãúÏßÄ', icon: 'üìß' },
    { value: 'sms', label: 'SMS', description: 'Î¨∏Ïûê Î©îÏãúÏßÄ', icon: 'üí¨' },
    { value: 'push', label: 'Ìë∏Ïãú ÏïåÎ¶º', description: 'Î™®Î∞îÏùº Ìë∏Ïãú ÏïåÎ¶º', icon: 'üîî' },
    { value: 'chatbot', label: 'Ï±óÎ¥á', description: 'ÏûêÎèô ÏùëÎãµ Î©îÏãúÏßÄ', icon: 'ü§ñ' },
    { value: 'call', label: 'Ï†ÑÌôî', description: 'Ï†ÑÌôî ÏÉÅÎã¥ Ïä§ÌÅ¨Î¶ΩÌä∏', icon: 'üìû' }
  ];

  const categories = [
    { value: 'marketing', label: 'ÎßàÏºÄÌåÖ', description: 'ÌîÑÎ°úÎ™®ÏÖò Î∞è ÎßàÏºÄÌåÖ Î©îÏãúÏßÄ' },
    { value: 'support', label: 'Í≥†Í∞ùÏßÄÏõê', description: 'Í≥†Í∞ù Î¨∏Ïùò Î∞è ÏßÄÏõê' },
    { value: 'sales', label: 'ÏòÅÏóÖ', description: 'ÏòÅÏóÖ Î∞è ÏÑ∏ÏùºÏ¶à' },
    { value: 'onboarding', label: 'Ïò®Î≥¥Îî©', description: 'Ïã†Í∑ú Í≥†Í∞ù ÏïàÎÇ¥' },
    { value: 'retention', label: 'Î¶¨ÌÖêÏÖò', description: 'Í≥†Í∞ù Ïú†ÏßÄ Î∞è Ïû¨Ï∞∏Ïó¨' }
  ];

  const timingOptions = [
    { value: 'immediate', label: 'Ï¶âÏãú Î∞úÏÜ°' },
    { value: 'scheduled', label: 'ÏòàÏïΩ Î∞úÏÜ°' },
    { value: 'triggered', label: 'Ïù¥Î≤§Ìä∏ Í∏∞Î∞ò' },
    { value: 'drip', label: 'ÎìúÎ¶Ω Ï∫†ÌéòÏù∏' }
  ];

  const frequencyOptions = [
    { value: 'once', label: '1ÌöåÎßå' },
    { value: 'daily', label: 'Îß§Ïùº' },
    { value: 'weekly', label: 'Îß§Ï£º' },
    { value: 'monthly', label: 'Îß§Ïõî' },
    { value: 'custom', label: 'ÏÇ¨Ïö©Ïûê Ï†ïÏùò' }
  ];

  const triggerOptions = [
    'ÌöåÏõêÍ∞ÄÏûÖ', 'Ï≤´ Íµ¨Îß§', 'Ïû•Î∞îÍµ¨Îãà Î∞©Ïπò', 'Î¶¨Î∑∞ ÏûëÏÑ±', 
    'ÏÉùÏùº', 'Ìú¥Î©¥ ÏÉÅÌÉú', 'Ïû¨Íµ¨Îß§', 'ÌôòÎ∂à ÏöîÏ≤≠'
  ];

  const audienceOptions = [
    { value: 'all', label: 'Î™®Îì† Í≥†Í∞ù' },
    { value: 'new', label: 'Ïã†Í∑ú Í≥†Í∞ù' },
    { value: 'vip', label: 'VIP Í≥†Í∞ù' },
    { value: 'inactive', label: 'Ìú¥Î©¥ Í≥†Í∞ù' },
    { value: 'custom', label: 'ÏÇ¨Ïö©Ïûê Ï†ïÏùò' }
  ];

  const generatePreview = () => {
    let preview = formData.content;
    formData.variables.forEach(variable => {
      const placeholder = getVariablePlaceholder(variable);
      preview = preview.replace(new RegExp(`{{${variable}}}`, 'g'), placeholder);
    });
    return preview;
  };

  const getVariablePlaceholder = (variable: string) => {
    const placeholders: { [key: string]: string } = {
      'name': 'ÌôçÍ∏∏Îèô',
      'email': 'hong@example.com',
      'customerName': 'ÍπÄÍ≥†Í∞ù',
      'productName': 'Ïä§ÎßàÌä∏Ìè∞',
      'orderNumber': 'ORD-123456',
      'discount': '30',
      'discountPercent': '20',
      'price': '299,000Ïõê',
      'company': '(Ï£º)ÏòàÏãúÌöåÏÇ¨',
      'date': '2024-01-15',
      'amount': '150,000Ïõê'
    };
    return placeholders[variable] || `[${variable}]`;
  };

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-8">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Í∏∞Î≥∏ Ï†ïÎ≥¥</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">Ïä§ÌÅ¨Î¶ΩÌä∏Î™Ö *</label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => handleInputChange('name', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                    placeholder="Ïòà: Ïã†Í∑ú ÌöåÏõê ÌôòÏòÅ Ïù¥Î©îÏùº"
                    required
                  />
                </div>
                {formData.type === 'email' && (
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-2">Ï†úÎ™© *</label>
                    <input
                      type="text"
                      value={formData.subject || ''}
                      onChange={(e) => handleInputChange('subject', e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                      placeholder="Ïòà: üéâ Í∞ÄÏûÖÏùÑ Ï∂ïÌïòÎìúÎ¶ΩÎãàÎã§!"
                    />
                  </div>
                )}
              </div>
            </div>

            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Ïä§ÌÅ¨Î¶ΩÌä∏ Ïú†Ìòï</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {scriptTypes.map((type) => (
                  <label key={type.value} className="cursor-pointer">
                    <input
                      type="radio"
                      name="scriptType"
                      value={type.value}
                      checked={formData.type === type.value}
                      onChange={(e) => handleInputChange('type', e.target.value)}
                      className="sr-only"
                    />
                    <div className={`p-4 border rounded-xl transition-all ${
                      formData.type === type.value 
                        ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200' 
                        : 'border-gray-200 hover:border-gray-300'
                    }`}>
                      <div className="flex items-center space-x-3">
                        <span className="text-2xl">{type.icon}</span>
                        <div>
                          <div className="font-medium text-gray-900">{type.label}</div>
                          <div className="text-sm text-gray-500">{type.description}</div>
                        </div>
                      </div>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Ïπ¥ÌÖåÍ≥†Î¶¨</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {categories.map((category) => (
                  <label key={category.value} className="cursor-pointer">
                    <input
                      type="radio"
                      name="category"
                      value={category.value}
                      checked={formData.category === category.value}
                      onChange={(e) => handleInputChange('category', e.target.value)}
                      className="sr-only"
                    />
                    <div className={`p-4 border rounded-xl transition-all ${
                      formData.category === category.value 
                        ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200' 
                        : 'border-gray-200 hover:border-gray-300'
                    }`}>
                      <div className="font-medium text-gray-900">{category.label}</div>
                      <div className="text-sm text-gray-500">{category.description}</div>
                    </div>
                  </label>
                ))}
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* ÏôºÏ™Ω: Ïä§ÌÅ¨Î¶ΩÌä∏ ÏûëÏÑ± */}
            <div className="space-y-8">
              {/* Ïä§ÌÅ¨Î¶ΩÌä∏ Ï†úÎ™© */}
              <div className="bg-gradient-to-br from-white to-emerald-50/30 rounded-2xl shadow-xl border border-emerald-100/50 p-6 hover:shadow-2xl transition-all duration-300">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-8 h-8 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-lg flex items-center justify-center">
                    <span className="text-white text-sm font-bold">üìù</span>
                  </div>
                  <h3 className="text-lg font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent">Ïä§ÌÅ¨Î¶ΩÌä∏ Ï†úÎ™©</h3>
                </div>
                
                <input
                  type="text"
                  value={formData.subject || ''}
                  onChange={(e) => handleInputChange('subject', e.target.value)}
                  className="w-full px-4 py-3 border-2 border-emerald-200 rounded-xl focus:ring-3 focus:ring-emerald-500/20 focus:border-emerald-500 transition-all duration-200 backdrop-blur-sm bg-white/80 hover:border-emerald-300"
                  placeholder="Ïòà: Ïã†Í∑ú Í≥†Í∞ù ÌôòÏòÅ Î©îÏãúÏßÄ"
                />
              </div>

              {/* Ïä§ÌÅ¨Î¶ΩÌä∏ ÎÇ¥Ïö© */}
              <div className="bg-gradient-to-br from-white to-emerald-50/30 rounded-2xl shadow-xl border border-emerald-100/50 p-6 hover:shadow-2xl transition-all duration-300">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-8 h-8 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-lg flex items-center justify-center">
                    <span className="text-white text-sm font-bold">üí¨</span>
                  </div>
                  <h3 className="text-lg font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent">Ïä§ÌÅ¨Î¶ΩÌä∏ ÎÇ¥Ïö©</h3>
                </div>
                
                <textarea
                  name="content"
                  value={formData.content}
                  onChange={(e) => handleInputChange('content', e.target.value)}
                  rows={10}
                  className="w-full px-4 py-3 border-2 border-emerald-200 rounded-xl focus:ring-3 focus:ring-emerald-500/20 focus:border-emerald-500 transition-all duration-200 backdrop-blur-sm resize-none bg-white/80 hover:border-emerald-300 font-mono text-sm"
                  placeholder="ÏïàÎÖïÌïòÏÑ∏Ïöî {{Í≥†Í∞ùÎ™Ö}}Îãò! 
Ï†ÄÌù¨ {{ÌöåÏÇ¨Î™Ö}}ÏóêÏÑú ÌäπÎ≥Ñ Ïù¥Î≤§Ìä∏Î•º ÏßÑÌñâÌïòÍ≥† ÏûàÏäµÎãàÎã§.
{{ÏÉÅÌíàÎ™Ö}}ÏùÑ {{Ìï†Ïù∏Ïú®}}% Ìï†Ïù∏Îêú Í∞ÄÍ≤©ÏúºÎ°ú ÎßåÎÇòÎ≥¥ÏÑ∏Ïöî!

‚Äª Î≥ÄÏàòÎäî {{Î≥ÄÏàòÎ™Ö}} ÌòïÌÉúÎ°ú ÏûÖÎ†•ÌïòÏÑ∏Ïöî."
                  required
                />
                <div className="mt-2 text-sm text-gray-500">
                  Î¨∏Ïûê Ïàò: {formData.content.length}
                  {formData.type === 'sms' && (
                    <span className={formData.content.length > 90 ? 'text-orange-600' : ''}>
                      {' '}(SMS Í∂åÏû•: 90Ïûê Ïù¥Ìïò)
                    </span>
                  )}
                </div>
              </div>
            </div>

            {/* Ïò§Î•∏Ï™Ω: Í∞úÏù∏Ìôî ÏπòÌôò Î≥ÄÏàò + ÎØ∏Î¶¨Î≥¥Í∏∞ */}
            <div className="flex flex-col h-full">
              {/* Í∞úÏù∏Ìôî ÏπòÌôò Î≥ÄÏàò */}
              <div className="bg-gradient-to-br from-white to-blue-50/30 rounded-2xl shadow-xl border border-blue-100/50 p-6 mb-6 flex-0">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center">
                    <span className="text-white text-sm font-bold">üîß</span>
                  </div>
                  <h3 className="text-lg font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">Í∞úÏù∏Ìôî ÏπòÌôò Î≥ÄÏàò</h3>
                </div>
                
                <div className="space-y-3">
                  <div className="flex space-x-2">
                    <input
                      type="text"
                      value={newVariable}
                      onChange={(e) => setNewVariable(e.target.value)}
                      placeholder="Î≥ÄÏàòÎ™Ö ÏûÖÎ†•"
                      className="flex-1 px-3 py-2 border-2 border-blue-200 rounded-lg focus:ring-3 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200 text-sm bg-white/80"
                      onKeyDown={(e) => {
                        if (e.key === 'Enter') {
                          e.preventDefault();
                          addVariable();
                        }
                      }}
                    />
                    <button
                      type="button"
                      onClick={addVariable}
                      className="px-4 py-2 bg-gradient-to-r from-blue-500 to-indigo-600 text-white text-sm rounded-lg hover:from-blue-600 hover:to-indigo-700 transition-all duration-200 shadow-lg"
                    >
                      Ï∂îÍ∞Ä
                    </button>
                  </div>

                  <div className="space-y-2 max-h-32 overflow-y-auto">
                    {formData.variables.map((variable, index) => (
                      <div key={index} className="flex items-center justify-between p-2 bg-blue-50 rounded-lg border border-blue-200">
                        <button
                          type="button"
                          onClick={() => insertVariable(variable)}
                          className="text-sm text-blue-700 hover:text-blue-900 font-mono font-medium"
                        >
                          {`{{${variable}}}`}
                        </button>
                        <button
                          type="button"
                          onClick={() => removeVariable(variable)}
                          className="text-red-600 hover:text-red-800 text-sm font-bold"
                        >
                          √ó
                        </button>
                      </div>
                    ))}
                  </div>

                  {formData.variables.length === 0 && (
                    <div className="text-sm text-gray-500 text-center py-4 bg-gray-50 rounded-lg">
                      Î≥ÄÏàòÎ•º Ï∂îÍ∞ÄÌïòÏó¨ Í∞úÏù∏ÌôîÎêú Î©îÏãúÏßÄÎ•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî
                    </div>
                  )}
                </div>
              </div>

              {/* ÎØ∏Î¶¨Î≥¥Í∏∞ */}
              <div className="bg-gradient-to-br from-white to-purple-50/30 rounded-2xl shadow-xl border border-purple-100/50 p-6 flex-1 flex flex-col">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-600 rounded-lg flex items-center justify-center">
                      <span className="text-white text-sm font-bold">üëÄ</span>
                    </div>
                    <h3 className="text-lg font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">ÎØ∏Î¶¨Î≥¥Í∏∞</h3>
                  </div>
                  
                  {/* ÌÖåÏä§Ìä∏ Î∞úÏÜ° Î≤ÑÌäº */}
                  <button
                    type="button"
                    onClick={() => setIsTestSendModalOpen(true)}
                    className="px-4 py-2 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-lg hover:from-green-600 hover:to-emerald-700 transition-all duration-200 shadow-lg hover:shadow-xl flex items-center space-x-2"
                  >
                    <span className="text-sm">üì±</span>
                    <span className="font-medium">ÌÖåÏä§Ìä∏ Î∞úÏÜ°</span>
                  </button>
                </div>
                
                <div className="flex-1 bg-gray-50 rounded-lg p-4 text-gray-700 whitespace-pre-wrap border border-gray-200">
                  {formData.content ? (
                    <div className="space-y-2">
                      {formData.subject && (
                        <div className="font-semibold text-gray-900 border-b border-gray-200 pb-2">
                          Ï†úÎ™©: {formData.subject.replace(/{{(\w+)}}/g, (match, variable) => getVariablePlaceholder(variable))}
                        </div>
                      )}
                      <div className="text-gray-700">
                        {formData.content.replace(/{{(\w+)}}/g, (match, variable) => getVariablePlaceholder(variable))}
                      </div>
                    </div>
                  ) : (
                    <div className="text-gray-500 text-center py-8">
                      Ïä§ÌÅ¨Î¶ΩÌä∏ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•ÌïòÎ©¥ ÎØ∏Î¶¨Î≥¥Í∏∞Í∞Ä ÌëúÏãúÎê©ÎãàÎã§.
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-8">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Î∞úÏÜ° Ï°∞Í±¥</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Î∞úÏÜ° ÏãúÏ†ê</label>
                  <select
                    value={formData.conditions.timing}
                    onChange={(e) => handleInputChange('conditions.timing', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                  >
                    {timingOptions.map(option => (
                      <option key={option.value} value={option.value}>{option.label}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Î∞úÏÜ° ÎπàÎèÑ</label>
                  <select
                    value={formData.conditions.frequency}
                    onChange={(e) => handleInputChange('conditions.frequency', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                  >
                    {frequencyOptions.map(option => (
                      <option key={option.value} value={option.value}>{option.label}</option>
                    ))}
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">ÎåÄÏÉÅ Í≥†Í∞ù</label>
                  <select
                    value={formData.conditions.targetAudience}
                    onChange={(e) => handleInputChange('conditions.targetAudience', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                  >
                    {audienceOptions.map(option => (
                      <option key={option.value} value={option.value}>{option.label}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>

            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Ìä∏Î¶¨Í±∞ Ïù¥Î≤§Ìä∏</h3>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                {triggerOptions.map((trigger) => (
                  <label key={trigger} className="flex items-center space-x-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={formData.conditions.triggers.includes(trigger)}
                      onChange={(e) => handleArrayChange(
                        'conditions.triggers', 
                        trigger, 
                        e.target.checked ? 'add' : 'remove'
                      )}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <span className="text-sm text-gray-700">{trigger}</span>
                  </label>
                ))}
              </div>
            </div>

            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Í≥†Í∏â ÏÑ§Ï†ï</h3>
              <div className="space-y-4">
                {[
                  { key: 'autoSend', label: 'ÏûêÎèô Î∞úÏÜ°', description: 'Ï°∞Í±¥Ïù¥ Ï∂©Ï°±ÎêòÎ©¥ ÏûêÎèôÏúºÎ°ú Î∞úÏÜ°Îê©ÎãàÎã§' },
                  { key: 'personalization', label: 'Í∞úÏù∏Ìôî', description: 'ÏàòÏã†ÏûêÎ≥ÑÎ°ú ÎÇ¥Ïö©ÏùÑ Í∞úÏù∏ÌôîÌï©ÎãàÎã§' },
                  { key: 'tracking', label: 'ÏÑ±Í≥º Ï∂îÏ†Å', description: 'Ïó¥ÎûåÎ•†, ÌÅ¥Î¶≠Î•† Îì±ÏùÑ Ï∂îÏ†ÅÌï©ÎãàÎã§' },
                  { key: 'a_b_testing', label: 'A/B ÌÖåÏä§Ìä∏', description: 'Ïó¨Îü¨ Î≤ÑÏ†ÑÏúºÎ°ú ÌÖåÏä§Ìä∏Í∞Ä Í∞ÄÎä•Ìï©ÎãàÎã§' }
                ].map((setting) => (
                  <label key={setting.key} className="flex items-start space-x-3 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={formData.settings[setting.key as keyof typeof formData.settings]}
                      onChange={(e) => handleInputChange(`settings.${setting.key}`, e.target.checked)}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mt-1"
                    />
                    <div className="flex-1">
                      <div className="font-medium text-gray-900">{setting.label}</div>
                      <div className="text-sm text-gray-500">{setting.description}</div>
                    </div>
                  </label>
                ))}
              </div>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-8">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-6">Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± ÏôÑÎ£å Í≤ÄÌÜ†</h3>
              
              <div className="bg-gray-50 rounded-xl p-6 space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-medium text-gray-900 mb-3">Í∏∞Î≥∏ Ï†ïÎ≥¥</h4>
                    <div className="space-y-2 text-sm">
                      <div><span className="text-gray-500">Ïä§ÌÅ¨Î¶ΩÌä∏Î™Ö:</span> {formData.name}</div>
                      <div><span className="text-gray-500">Ïú†Ìòï:</span> {scriptTypes.find(t => t.value === formData.type)?.label}</div>
                      <div><span className="text-gray-500">Ïπ¥ÌÖåÍ≥†Î¶¨:</span> {categories.find(c => c.value === formData.category)?.label}</div>
                      {formData.subject && <div><span className="text-gray-500">Ï†úÎ™©:</span> {formData.subject}</div>}
                    </div>
                  </div>
                  
                  <div>
                    <h4 className="font-medium text-gray-900 mb-3">Î∞úÏÜ° Ï°∞Í±¥</h4>
                    <div className="space-y-2 text-sm">
                      <div><span className="text-gray-500">Î∞úÏÜ° ÏãúÏ†ê:</span> {timingOptions.find(t => t.value === formData.conditions.timing)?.label}</div>
                      <div><span className="text-gray-500">Î∞úÏÜ° ÎπàÎèÑ:</span> {frequencyOptions.find(f => f.value === formData.conditions.frequency)?.label}</div>
                      <div><span className="text-gray-500">ÎåÄÏÉÅ Í≥†Í∞ù:</span> {audienceOptions.find(a => a.value === formData.conditions.targetAudience)?.label}</div>
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-gray-900 mb-3">Î©îÏãúÏßÄ ÎÇ¥Ïö©</h4>
                  <div className="p-4 bg-white rounded-lg border text-sm">
                    <div className="text-gray-700 whitespace-pre-wrap">{formData.content}</div>
                  </div>
                </div>

                {formData.variables.length > 0 && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-3">ÏÇ¨Ïö©Îêú Î≥ÄÏàò</h4>
                    <div className="flex flex-wrap gap-2">
                      {formData.variables.map((variable, index) => (
                        <span key={index} className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-mono">
                          {`{{${variable}}}`}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {formData.conditions.triggers.length > 0 && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-3">Ìä∏Î¶¨Í±∞ Ïù¥Î≤§Ìä∏</h4>
                    <div className="flex flex-wrap gap-2">
                      {formData.conditions.triggers.map((trigger, index) => (
                        <span key={index} className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm">
                          {trigger}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                <div>
                  <h4 className="font-medium text-gray-900 mb-3">ÌôúÏÑ±ÌôîÎêú ÏÑ§Ï†ï</h4>
                  <div className="flex flex-wrap gap-2">
                    {Object.entries(formData.settings)
                      .filter(([_, value]) => value)
                      .map(([key, _], index) => {
                        const setting = [
                          { key: 'autoSend', label: 'ÏûêÎèô Î∞úÏÜ°' },
                          { key: 'personalization', label: 'Í∞úÏù∏Ìôî' },
                          { key: 'tracking', label: 'ÏÑ±Í≥º Ï∂îÏ†Å' },
                          { key: 'a_b_testing', label: 'A/B ÌÖåÏä§Ìä∏' }
                        ].find(s => s.key === key);
                        
                        return setting ? (
                          <span key={index} className="px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm">
                            {setting.label}
                          </span>
                        ) : null;
                      })
                    }
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <Layout 
      title="Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±" 
      subtitle="ÏÉàÎ°úÏö¥ ÎßàÏºÄÌåÖ Ïä§ÌÅ¨Î¶ΩÌä∏Î•º ÏÉùÏÑ±ÌïòÍ≥† Ï∫†ÌéòÏù∏Ïóê ÌôúÏö©ÌïòÏÑ∏Ïöî."
    >
      <div className="p-6">
        {/* ÏßÑÌñâ Îã®Í≥Ñ ÌëúÏãú */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
          <div className="flex items-center justify-between">
            {Array.from({ length: totalSteps }, (_, i) => i + 1).map((step) => (
              <div key={step} className="flex items-center">
                <div
                  className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium transition-colors ${
                    step === currentStep
                      ? 'bg-blue-600 text-white'
                      : step < currentStep
                      ? 'bg-green-600 text-white'
                      : 'bg-gray-200 text-gray-600'
                  }`}
                >
                  {step < currentStep ? '‚úì' : step}
                </div>
                {step < totalSteps && (
                  <div
                    className={`w-16 h-1 mx-2 transition-colors ${
                      step < currentStep ? 'bg-green-600' : 'bg-gray-200'
                    }`}
                  />
                )}
              </div>
            ))}
          </div>
          <div className="flex justify-between mt-3">
            <span className="text-sm font-medium text-gray-900">Í∏∞Î≥∏ Ï†ïÎ≥¥</span>
            <span className="text-sm font-medium text-gray-900">Î©îÏãúÏßÄ ÏûëÏÑ±</span>
            <span className="text-sm font-medium text-gray-900">Î∞úÏÜ° ÏÑ§Ï†ï</span>
            <span className="text-sm font-medium text-gray-900">Í≤ÄÌÜ† ÏôÑÎ£å</span>
          </div>
        </div>

        {/* Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± Ìèº */}
        <form onSubmit={handleSubmit}>
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
            {renderStep()}
          </div>

          {/* ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î≤ÑÌäº */}
          <div className="flex justify-between">
            <button
              type="button"
              onClick={prevStep}
              disabled={currentStep === 1}
              className={`px-6 py-3 text-sm font-medium rounded-lg transition-colors ${
                currentStep === 1
                  ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Ïù¥Ï†Ñ
            </button>

            <div className="flex space-x-3">
              <button
                type="button"
                onClick={() => router.push('/scripts')}
                className="px-6 py-3 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Ï∑®ÏÜå
              </button>
              
              {currentStep < totalSteps ? (
                <button
                  type="button"
                  onClick={nextStep}
                  className="px-6 py-3 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Îã§Ïùå
                </button>
              ) : (
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className={`px-6 py-3 text-sm font-medium text-white rounded-lg transition-colors ${
                    isSubmitting
                      ? 'bg-gray-400 cursor-not-allowed'
                      : 'bg-green-600 hover:bg-green-700'
                  }`}
                >
                  {isSubmitting ? 'ÏÉùÏÑ± Ï§ë...' : 'Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ± ÏôÑÎ£å'}
                </button>
              )}
            </div>
          </div>
        </form>

        {/* ÌÖåÏä§Ìä∏ Î∞úÏÜ° Î™®Îã¨ */}
        {isTestSendModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl shadow-2xl max-w-md w-full p-6 animate-in zoom-in-95 duration-200">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-xl font-bold text-gray-900">ÌÖåÏä§Ìä∏ Î∞úÏÜ°</h3>
                <button
                  type="button"
                  onClick={() => {
                    setIsTestSendModalOpen(false);
                    setTestPhoneNumber('');
                  }}
                  className="text-gray-400 hover:text-gray-600 transition-colors"
                >
                  <span className="text-2xl">√ó</span>
                </button>
              </div>

              <div className="space-y-6">
                {/* Î∞úÏÜ° Ï†ïÎ≥¥ */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <div className="flex items-center space-x-3 mb-3">
                    <div className="w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-xs">üìß</span>
                    </div>
                    <span className="font-medium text-gray-900">Ïù¥Î©îÏùº</span>
                  </div>
                  <div className="text-sm text-gray-600">
                    <div className="mb-1">Ï†úÎ™©: {formData.subject || 'Ï†úÎ™© ÏóÜÏùå'}</div>
                    <div className="line-clamp-2">ÎÇ¥Ïö©: {formData.content.substring(0, 50)}...</div>
                  </div>
                </div>

                {/* Ìï∏ÎìúÌè∞ Î≤àÌò∏ ÏûÖÎ†• */}
                <div>
                  <label className="block text-sm font-bold text-gray-700 mb-3">
                    üì± ÌÖåÏä§Ìä∏ Î∞úÏÜ°Ìï† Ìï∏ÎìúÌè∞ Î≤àÌò∏
                  </label>
                  <input
                    type="tel"
                    value={testPhoneNumber}
                    onChange={(e) => setTestPhoneNumber(e.target.value)}
                    placeholder="010-1234-5678"
                    className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:ring-3 focus:ring-purple-500/20 focus:border-purple-500 transition-all duration-200"
                    disabled={isTestSending}
                  />
                  <p className="text-xs text-gray-500 mt-2">
                    ÏòàÏãú: 010-1234-5678 ÎòêÎäî 01012345678
                  </p>
                </div>

                {/* Ï£ºÏùòÏÇ¨Ìï≠ */}
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <div className="flex items-start space-x-2">
                    <span className="text-yellow-600 text-sm">‚ö†Ô∏è</span>
                    <div className="text-sm text-yellow-800">
                      <p className="font-medium mb-1">ÌÖåÏä§Ìä∏ Î∞úÏÜ° Ï£ºÏùòÏÇ¨Ìï≠</p>
                      <ul className="text-xs space-y-1">
                        <li>‚Ä¢ Ïã§Ï†ú Î©îÏãúÏßÄÍ∞Ä Î∞úÏÜ°Îê©ÎãàÎã§</li>
                        <li>‚Ä¢ Î∞úÏÜ° ÌõÑ Ï∑®ÏÜåÌï† Ïàò ÏóÜÏäµÎãàÎã§</li>
                        <li>‚Ä¢ Î≥∏Ïù∏ ÎòêÎäî ÌÖåÏä§Ìä∏Ïö© Î≤àÌò∏Î•º ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî</li>
                      </ul>
                    </div>
                  </div>
                </div>

                {/* Î≤ÑÌäº */}
                <div className="flex space-x-3">
                  <button
                    type="button"
                    onClick={() => {
                      setIsTestSendModalOpen(false);
                      setTestPhoneNumber('');
                    }}
                    disabled={isTestSending}
                    className="flex-1 px-4 py-3 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50"
                  >
                    Ï∑®ÏÜå
                  </button>
                  <button
                    type="button"
                    onClick={handleTestSend}
                    disabled={isTestSending || !testPhoneNumber.trim()}
                    className="flex-1 px-4 py-3 bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-lg hover:from-purple-600 hover:to-pink-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
                  >
                    {isTestSending ? (
                      <>
                        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        <span>Î∞úÏÜ° Ï§ë...</span>
                      </>
                    ) : (
                      <>
                        <span>üì§</span>
                        <span>ÌÖåÏä§Ìä∏ Î∞úÏÜ°</span>
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </Layout>
  );
} 