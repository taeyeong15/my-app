'use client';

import Layout from '@/components/Layout';
import { useState, useEffect, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';

interface CustomerSegmentForm {
  name: string;
  description: string;
  criteria: {
    // 주소
    address: { value: string; enabled: boolean };
    // 나이
    age: { min: string; max: string; enabled: boolean };
    // 기념일
    anniversary_date: { from: string; to: string; enabled: boolean };
    // APP PUSH 동의 여부
    app_push_agree_yn: { value: string; enabled: boolean };
    // 이메일 (도메인 조건)
    email: { domain: string; enabled: boolean };
    // EMAIL 동의 여부
    email_agree_yn: { value: string; enabled: boolean };
    // 외국인 여부
    foreigner_yn: { value: string; enabled: boolean };
    // 성별
    gender: { value: string; enabled: boolean };
    // 가입일
    join_date: { from: string; to: string; enabled: boolean };
    // 카카오톡 동의 여부
    kakao_agree_yn: { value: string; enabled: boolean };
    // 마케팅 동의 여부
    marketing_agree_yn: { value: string; enabled: boolean };
    // 혼인 여부
    marriage_status: { value: string; enabled: boolean };
    // 회원등급
    member_grade: { value: string; enabled: boolean };
    // 회원상태
    member_status: { value: string; enabled: boolean };
    // SMS 동의 여부
    sms_agree_yn: { value: string; enabled: boolean };
  };
  tags: string[];
}

interface CustomerGroup {
  id: number;
  name: string;
  description: string;
  estimated_count: number;
  actual_count: number;
  status: string;
  created_by: string;
  created_at: string;
  updated_at: string;
  created_date: string;
  created_dept: string;
  updated_date?: string;
  updated_dept?: string;
  updated_emp_no?: string;
}

interface User {
  id: number;
  email: string;
  name: string;
  role: string;
  emp_no?: string;
}

function CustomerSegmentContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  
  // URL 파라미터에서 모드와 ID 확인
  const mode = searchParams.get('mode') || 'create'; // create, view, edit
  const groupId = searchParams.get('id');
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [originalGroup, setOriginalGroup] = useState<CustomerGroup | null>(null);
  const [canEdit, setCanEdit] = useState(false);
  
  const [formData, setFormData] = useState<CustomerSegmentForm>({
    name: '',
    description: '',
    criteria: {
      address: { value: '', enabled: false },
      age: { min: '', max: '', enabled: false },
      anniversary_date: { from: '', to: '', enabled: false },
      app_push_agree_yn: { value: '', enabled: false },
      email: { domain: '', enabled: false },
      email_agree_yn: { value: '', enabled: false },
      foreigner_yn: { value: '', enabled: false },
      gender: { value: '', enabled: false },
      join_date: { from: '', to: '', enabled: false },
      kakao_agree_yn: { value: '', enabled: false },
      marketing_agree_yn: { value: '', enabled: false },
      marriage_status: { value: '', enabled: false },
      member_grade: { value: '', enabled: false },
      member_status: { value: '', enabled: false },
      sms_agree_yn: { value: '', enabled: false },
    },
    tags: []
  });
  const [newTag, setNewTag] = useState('');

  // 컴포넌트 마운트 시 초기화
  useEffect(() => {
    checkAuth();
    if (groupId && (mode === 'view' || mode === 'edit')) {
      fetchCustomerGroup();
    }
  }, [groupId, mode]);

  // 사용자 인증 확인 (sessionStorage 기반)
  const checkAuth = () => {
    try {
      // sessionStorage에서 사용자 정보 확인
      const currentUserStr = sessionStorage.getItem('currentUser');
      
      if (!currentUserStr) {
        alert('로그인이 필요합니다.');
        router.push('/login');
        return;
      }

      const currentUser = JSON.parse(currentUserStr);
      
      // 기본 사용자 정보 유효성 검사
      if (!currentUser.id || !currentUser.email || !currentUser.name) {
        console.error('사용자 정보가 불완전합니다.');
        sessionStorage.clear();
        alert('세션이 만료되었습니다. 다시 로그인해주세요.');
        router.push('/login');
        return;
      }
      
      // 세션 만료 시간 확인 (선택사항)
      const sessionStartTime = sessionStorage.getItem('sessionStartTime');
      if (sessionStartTime) {
        const sessionAge = Date.now() - parseInt(sessionStartTime);
        const maxSessionAge = 24 * 60 * 60 * 1000; // 24시간
        
        if (sessionAge > maxSessionAge) {
          console.log('세션이 만료되었습니다.');
          sessionStorage.clear();
          alert('세션이 만료되었습니다. 다시 로그인해주세요.');
          router.push('/login');
          return;
        }
      }
      
      // 현재 사용자 정보 설정
      setCurrentUser(currentUser);
      
      // 마지막 활동 시간 업데이트
      sessionStorage.setItem('lastActivity', Date.now().toString());
      
    } catch (error) {
      console.error('인증 확인 오류:', error);
      sessionStorage.clear();
      alert('인증 처리 중 오류가 발생했습니다. 다시 로그인해주세요.');
      router.push('/login');
    }
  };

  // 고객군 데이터 조회
  const fetchCustomerGroup = async () => {
    if (!groupId) return;
    
    try {
      setIsLoading(true);
      const response = await fetch(`/api/customer-groups/${groupId}`);
      const data = await response.json();

      if (data.success && data.group) {
        const group = data.group;
        setOriginalGroup(group);
        
        // 폼 데이터 설정
        setFormData({
          name: group.name || '',
          description: group.description || '',
          criteria: {
            age: { min: '', max: '', enabled: false },
            gender: { value: '', enabled: false },
            purchaseAmount: { min: '', max: '', enabled: false },
            purchaseCount: { min: '', max: '', enabled: false },
            lastPurchase: { days: '', enabled: false },
            region: { value: '', enabled: false },
            membershipLevel: { value: '', enabled: false },
          },
          tags: []
        });
        
        // 권한 확인
        checkEditPermission(group);
      } else {
        alert('고객군을 찾을 수 없습니다.');
        router.push('/customers');
      }
    } catch (error) {
      console.error('고객군 조회 오류:', error);
      alert('고객군 조회 중 오류가 발생했습니다.');
      router.push('/customers');
    } finally {
      setIsLoading(false);
    }
  };

  // 수정 권한 확인
  const checkEditPermission = (group: CustomerGroup) => {
    if (!currentUser) {
      setCanEdit(false);
      return;
    }

    // 관리자는 모든 고객군 수정 가능
    if (currentUser.role === 'admin') {
      setCanEdit(true);
      return;
    }

    // 생성자 본인인지 확인 (created_emp_no와 현재 사용자의 emp_no 비교)
    // 현재 사용자 정보에서 emp_no를 가져오거나, email에서 추출
    const userEmpNo = currentUser.emp_no || currentUser.email.split('@')[0];
    const createdEmpNo = group.created_by; // API에서 created_emp_no를 created_by로 매핑
    
    setCanEdit(userEmpNo === createdEmpNo);
  };

  // 페이지 제목과 부제목 결정
  const getPageTitle = () => {
    switch (mode) {
      case 'view':
        return '고객군 상세보기';
      case 'edit':
        return '고객군 수정';
      default:
        return '고객군 생성';
    }
  };

  const getPageSubtitle = () => {
    switch (mode) {
      case 'view':
        return originalGroup ? `${originalGroup.name} 고객군의 상세 정보입니다.` : '고객군 정보를 확인할 수 있습니다.';
      case 'edit':
        return originalGroup ? `${originalGroup.name} 고객군을 수정할 수 있습니다.` : '고객군 정보를 수정할 수 있습니다.';
      default:
        return '타겟 마케팅을 위한 새로운 고객군을 생성할 수 있습니다.';
    }
  };

  // 입력 필드 비활성화 여부 결정
  const isFieldDisabled = () => {
    if (mode === 'view') return true;
    if (mode === 'edit' && !canEdit) return true;
    return false;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    if (isFieldDisabled()) return;
    
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCriteriaChange = (criteriaType: string, field: string, value: string | boolean) => {
    if (isFieldDisabled()) return;
    
    setFormData(prev => ({
      ...prev,
      criteria: {
        ...prev.criteria,
        [criteriaType]: {
          ...prev.criteria[criteriaType as keyof typeof prev.criteria],
          [field]: value
        }
      }
    }));
  };

  const addTag = () => {
    if (isFieldDisabled()) return;
    
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    if (isFieldDisabled()) return;
    
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (mode === 'view') {
      router.push('/customers');
      return;
    }
    
    if (mode === 'edit' && !canEdit) {
      alert('수정 권한이 없습니다.');
      return;
    }
    
    setIsSubmitting(true);

    try {
      // 활성화된 조건들만 필터링
      const activeCriteria: any = {};
      Object.keys(formData.criteria).forEach(key => {
        const criterion = formData.criteria[key as keyof typeof formData.criteria];
        if (criterion.enabled) {
          activeCriteria[key] = criterion;
        }
      });

      let requestData: any;
      let url: string;
      let method: string;

      if (mode === 'edit') {
        // 수정 모드
        requestData = {
          group_name: formData.name,
          customer_count: originalGroup?.estimated_count || 0,
          use_yn: 'Y',
          updated_dept: currentUser?.role === 'admin' ? '관리팀' : '마케팅팀',
          updated_emp_no: currentUser?.emp_no || currentUser?.email.split('@')[0] || 'SYSTEM'
        };
        url = `/api/customer-groups/${groupId}`;
        method = 'PUT';
      } else {
        // 생성 모드
        const estimatedCount = Math.floor(Math.random() * 10000) + 1000;
        requestData = {
          group_name: formData.name,
          created_dept: currentUser?.role === 'admin' ? '관리팀' : '마케팅팀',
          created_emp_no: currentUser?.emp_no || currentUser?.email.split('@')[0] || 'SYSTEM',
          customer_count: estimatedCount
        };
        url = '/api/customer-groups';
        method = 'POST';
      }

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      const data = await response.json();

      if (data.success) {
        alert(mode === 'edit' ? '고객군이 성공적으로 수정되었습니다!' : '고객군이 성공적으로 생성되었습니다!');
        router.push('/customers');
      } else {
        throw new Error(data.error || `고객군 ${mode === 'edit' ? '수정' : '생성'}에 실패했습니다.`);
      }
    } catch (error: any) {
      console.error(`고객군 ${mode === 'edit' ? '수정' : '생성'} 실패:`, error);
      alert(`고객군 ${mode === 'edit' ? '수정' : '생성'}에 실패했습니다: ` + error.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  const generateCriteriaSQL = () => {
    const conditions: string[] = [];
    
    if (formData.criteria.age.enabled && formData.criteria.age.min && formData.criteria.age.max) {
      conditions.push(`나이 BETWEEN ${formData.criteria.age.min} AND ${formData.criteria.age.max}`);
    }
    
    if (formData.criteria.gender.enabled && formData.criteria.gender.value) {
      conditions.push(`성별 = '${formData.criteria.gender.value}'`);
    }
    
    if (formData.criteria.purchaseAmount.enabled && formData.criteria.purchaseAmount.min && formData.criteria.purchaseAmount.max) {
      conditions.push(`총구매액 BETWEEN ${formData.criteria.purchaseAmount.min} AND ${formData.criteria.purchaseAmount.max}`);
    }
    
    if (formData.criteria.purchaseCount.enabled && formData.criteria.purchaseCount.min && formData.criteria.purchaseCount.max) {
      conditions.push(`구매횟수 BETWEEN ${formData.criteria.purchaseCount.min} AND ${formData.criteria.purchaseCount.max}`);
    }
    
    if (formData.criteria.lastPurchase.enabled && formData.criteria.lastPurchase.days) {
      conditions.push(`마지막구매일 >= ${formData.criteria.lastPurchase.days}일 전`);
    }
    
    if (formData.criteria.region.enabled && formData.criteria.region.value) {
      conditions.push(`지역 = '${formData.criteria.region.value}'`);
    }
    
    if (formData.criteria.membershipLevel.enabled && formData.criteria.membershipLevel.value) {
      conditions.push(`회원등급 = '${formData.criteria.membershipLevel.value}'`);
    }
    
    return conditions.join(' AND ') || '조건을 설정해주세요';
  };

  // 로딩 중일 때
  if (isLoading) {
    return (
      <Layout title={getPageTitle()} subtitle={getPageSubtitle()}>
        <div className="flex items-center justify-center min-h-[60vh]">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
            <p className="mt-4 text-gray-600">고객군 정보를 불러오는 중...</p>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout 
      title={getPageTitle()}
      subtitle={getPageSubtitle()}
    >
      <div className="p-6">
        {/* 권한 경고 메시지 */}
        {mode === 'edit' && !canEdit && (
          <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
            <div className="flex">
              <svg className="h-5 w-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-yellow-800">수정 권한 없음</h3>
                <p className="text-sm text-yellow-700 mt-1">
                  이 고객군은 본인이 생성한 것이 아니거나 관리자 권한이 없어 수정할 수 없습니다.
                </p>
              </div>
            </div>
          </div>
        )}
        
        <form onSubmit={handleSubmit} className="space-y-8">
          {/* 기본 정보 */}
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-6">기본 정보</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  고객군명 <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  required
                  disabled={isFieldDisabled()}
                  className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    isFieldDisabled() ? 'bg-gray-50 text-gray-500 cursor-not-allowed' : ''
                  }`}
                  placeholder="예: 고가치 고객군"
                />
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  설명
                </label>
                <textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  rows={3}
                  disabled={isFieldDisabled()}
                  className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    isFieldDisabled() ? 'bg-gray-50 text-gray-500 cursor-not-allowed' : ''
                  }`}
                  placeholder="고객군의 특성과 목적을 설명해주세요..."
                />
              </div>
            </div>
          </div>

          {/* 세분화 조건 */}
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-6">세분화 조건</h3>
            
            <div className="space-y-6">
              {/* 연령 조건 */}
              <div className="flex items-start space-x-4">
                <input
                  type="checkbox"
                  checked={formData.criteria.age.enabled}
                  onChange={(e) => handleCriteriaChange('age', 'enabled', e.target.checked)}
                  disabled={isFieldDisabled()}
                  className={`mt-1 ${isFieldDisabled() ? 'cursor-not-allowed opacity-50' : ''}`}
                />
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700 mb-2">연령</label>
                  <div className="flex items-center space-x-2">
                    <input
                      type="number"
                      value={formData.criteria.age.min}
                      onChange={(e) => handleCriteriaChange('age', 'min', e.target.value)}
                      disabled={!formData.criteria.age.enabled || isFieldDisabled()}
                      placeholder="최소"
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 w-20"
                    />
                    <span>~</span>
                    <input
                      type="number"
                      value={formData.criteria.age.max}
                      onChange={(e) => handleCriteriaChange('age', 'max', e.target.value)}
                      disabled={!formData.criteria.age.enabled || isFieldDisabled()}
                      placeholder="최대"
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 w-20"
                    />
                    <span className="text-sm text-gray-500">세</span>
                  </div>
                </div>
              </div>

              {/* 성별 조건 */}
              <div className="flex items-start space-x-4">
                <input
                  type="checkbox"
                  checked={formData.criteria.gender.enabled}
                  onChange={(e) => handleCriteriaChange('gender', 'enabled', e.target.checked)}
                  disabled={isFieldDisabled()}
                  className={`mt-1 ${isFieldDisabled() ? 'cursor-not-allowed opacity-50' : ''}`}
                />
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700 mb-2">성별</label>
                  <select
                    value={formData.criteria.gender.value}
                    onChange={(e) => handleCriteriaChange('gender', 'value', e.target.value)}
                    disabled={!formData.criteria.gender.enabled || isFieldDisabled()}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100"
                  >
                    <option value="">선택해주세요</option>
                    <option value="남성">남성</option>
                    <option value="여성">여성</option>
                  </select>
                </div>
              </div>

              {/* 구매 금액 조건 */}
              <div className="flex items-start space-x-4">
                <input
                  type="checkbox"
                  checked={formData.criteria.purchaseAmount.enabled}
                  onChange={(e) => handleCriteriaChange('purchaseAmount', 'enabled', e.target.checked)}
                  disabled={isFieldDisabled()}
                  className={`mt-1 ${isFieldDisabled() ? 'cursor-not-allowed opacity-50' : ''}`}
                />
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700 mb-2">총 구매 금액</label>
                  <div className="flex items-center space-x-2">
                    <input
                      type="number"
                      value={formData.criteria.purchaseAmount.min}
                      onChange={(e) => handleCriteriaChange('purchaseAmount', 'min', e.target.value)}
                      disabled={!formData.criteria.purchaseAmount.enabled || isFieldDisabled()}
                      placeholder="최소 금액"
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 w-32"
                    />
                    <span>~</span>
                    <input
                      type="number"
                      value={formData.criteria.purchaseAmount.max}
                      onChange={(e) => handleCriteriaChange('purchaseAmount', 'max', e.target.value)}
                      disabled={!formData.criteria.purchaseAmount.enabled || isFieldDisabled()}
                      placeholder="최대 금액"
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 w-32"
                    />
                    <span className="text-sm text-gray-500">원</span>
                  </div>
                </div>
              </div>

              {/* 구매 횟수 조건 */}
              <div className="flex items-start space-x-4">
                <input
                  type="checkbox"
                  checked={formData.criteria.purchaseCount.enabled}
                  onChange={(e) => handleCriteriaChange('purchaseCount', 'enabled', e.target.checked)}
                  disabled={isFieldDisabled()}
                  className={`mt-1 ${isFieldDisabled() ? 'cursor-not-allowed opacity-50' : ''}`}
                />
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700 mb-2">구매 횟수</label>
                  <div className="flex items-center space-x-2">
                    <input
                      type="number"
                      value={formData.criteria.purchaseCount.min}
                      onChange={(e) => handleCriteriaChange('purchaseCount', 'min', e.target.value)}
                      disabled={!formData.criteria.purchaseCount.enabled || isFieldDisabled()}
                      placeholder="최소"
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 w-20"
                    />
                    <span>~</span>
                    <input
                      type="number"
                      value={formData.criteria.purchaseCount.max}
                      onChange={(e) => handleCriteriaChange('purchaseCount', 'max', e.target.value)}
                      disabled={!formData.criteria.purchaseCount.enabled || isFieldDisabled()}
                      placeholder="최대"
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 w-20"
                    />
                    <span className="text-sm text-gray-500">회</span>
                  </div>
                </div>
              </div>

              {/* 마지막 구매일 조건 */}
              <div className="flex items-start space-x-4">
                <input
                  type="checkbox"
                  checked={formData.criteria.lastPurchase.enabled}
                  onChange={(e) => handleCriteriaChange('lastPurchase', 'enabled', e.target.checked)}
                  disabled={isFieldDisabled()}
                  className={`mt-1 ${isFieldDisabled() ? 'cursor-not-allowed opacity-50' : ''}`}
                />
                <div className="flex-1">
                  <label className="block text-sm font-medium text-gray-700 mb-2">마지막 구매일</label>
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-gray-500">최근</span>
                    <input
                      type="number"
                      value={formData.criteria.lastPurchase.days}
                      onChange={(e) => handleCriteriaChange('lastPurchase', 'days', e.target.value)}
                      disabled={!formData.criteria.lastPurchase.enabled || isFieldDisabled()}
                      placeholder="일수"
                      className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 w-20"
                    />
                    <span className="text-sm text-gray-500">일 이내</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* 생성된 조건 미리보기 */}
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-6">조건 미리보기</h3>
            <div className="bg-gray-50 rounded-lg p-4">
              <code className="text-sm text-gray-700">
                {generateCriteriaSQL()}
              </code>
            </div>
          </div>

          {/* 태그 */}
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-6">태그</h3>
            <div className="flex items-center space-x-2 mb-3">
              <input
                type="text"
                value={newTag}
                onChange={(e) => setNewTag(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}
                disabled={isFieldDisabled()}
                placeholder="태그 추가..."
                className={`px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                  isFieldDisabled() ? 'bg-gray-50 text-gray-500 cursor-not-allowed' : ''
                }`}
              />
              <button
                type="button"
                onClick={addTag}
                disabled={isFieldDisabled()}
                className={`px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors ${
                  isFieldDisabled() ? 'opacity-50 cursor-not-allowed' : ''
                }`}
              >
                추가
              </button>
            </div>
            <div className="flex flex-wrap gap-2">
              {formData.tags.map((tag) => (
                <span
                  key={tag}
                  className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800"
                >
                  {tag}
                  {!isFieldDisabled() && (
                    <button
                      type="button"
                      onClick={() => removeTag(tag)}
                      className="ml-2 text-blue-600 hover:text-blue-800"
                    >
                      ×
                    </button>
                  )}
                </span>
              ))}
            </div>
          </div>

          {/* 액션 버튼 */}
          <div className="flex justify-end space-x-4">
            <button
              type="button"
              onClick={() => router.push('/customers')}
              className="inline-flex items-center px-6 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors"
            >
              {mode === 'view' ? '목록으로' : '취소'}
            </button>
            {mode !== 'view' && (
              <button
                type="submit"
                disabled={isSubmitting || (mode === 'edit' && !canEdit)}
                className="inline-flex items-center px-6 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {isSubmitting ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    {mode === 'edit' ? '수정 중...' : '생성 중...'}
                  </>
                ) : (
                  mode === 'edit' ? '고객군 수정' : '고객군 생성'
                )}
              </button>
            )}
          </div>
        </form>
      </div>
    </Layout>
  );
}

// Loading 컴포넌트
function Loading() {
  return (
    <Layout>
      <div className="flex items-center justify-center min-h-screen">
        <div className="flex items-center space-x-2">
          <svg className="animate-spin h-5 w-5 text-blue-600" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span className="text-gray-700">로딩 중...</span>
        </div>
      </div>
    </Layout>
  );
}

// Suspense로 래핑된 기본 export
export default function CustomerSegmentPage() {
  return (
    <Suspense fallback={<Loading />}>
      <CustomerSegmentContent />
    </Suspense>
  );
} 