version: '3.8'

services:
  # MySQL 데이터베이스
  mysql:
    image: mysql:8.0
    container_name: campaign-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-secure_root_password}
      MYSQL_DATABASE: ${DB_NAME:-campaign_db}
      MYSQL_USER: ${DB_USER:-campaign_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secure_password}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/initial-data.sql:/docker-entrypoint-initdb.d/02-initial-data.sql:ro
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
    ports:
      - "3306:3306"
    networks:
      - campaign-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis (세션 및 캐시용)
  redis:
    image: redis:7-alpine
    container_name: campaign-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - campaign-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # 메인 애플리케이션
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: campaign-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=${DB_NAME:-campaign_db}
      - DB_USER=${DB_USER:-campaign_user}
      - DB_PASSWORD=${DB_PASSWORD:-secure_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-secure_redis_password}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-minimum-32-characters}
      - APP_URL=${APP_URL:-http://localhost:3000}
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - ./env.template:/app/.env.template:ro
    ports:
      - "3000:3000"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - campaign-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Nginx 리버스 프록시 (선택사항)
  nginx:
    image: nginx:alpine
    container_name: campaign-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - app_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - campaign-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local

networks:
  campaign-network:
    driver: bridge 